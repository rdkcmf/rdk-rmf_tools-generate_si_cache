#!/bin/sh
#
# If not stated otherwise in this file or this component's Licenses.txt file the
# following copyright and licenses apply:
#
# Copyright 2016 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
export LIBXML2_INCL="/usr/include/libxml2"
export LIBXML2_LIBDIR="/usr/lib/x86_64-linux-gnu"

is_libxml2_present() {
	if [ ! -d "$LIBXML2_INCL" ]; then
		echo "LibXml2 is not installed in this machine. Please install and try again."
		exit 1
	fi
}

do_autoreconf() {
	echo "Generating configuration scripts for building the utility...."
	mkdir -p config
	mkdir -p m4
	autoreconf --force --install -I config -I m4
	if [ $? -ne 0 ]; then
	    echo "Generating configuration scripts for building the utility....FAILED"
	    retval=1
        else
	    echo "Generating configuration scripts for building the utility....Success"
	    echo ""
	    retval=0
	fi
        return "$retval"
}

do_configure() {
	echo "Generating Makefiles...."
	./configure CPPFLAGS=-I$LIBXML2_INCL LDFLAGS=-L$LIBXML2_LIBDIR
	if [ $? -ne 0 ]; then
	    echo "Generating Makefiles....FAILED"
    	    retval=1
	else
	    echo "Generating Makefiles...Success"
	    echo ""
    	    retval=0
	fi
	return "$retval"
}

do_compile() {
	echo "Building generate_si_cache utility source code...."
	mkdir -p bin
	make
	if [ $? -ne 0 ]; then
	    echo "Building generate_si_cache utility source code....FAILED"
	    retval=1
	else
	    echo "Building generate_si_cache utility source code....Success"
	    retval=0
	fi
	return "$retval"
}

do_clean() {
	echo "Removing obj files and generated binaries...."
	make clean
	if [ $? -ne 0 ]; then
	    echo "Removing obj files and generated binaries....FAILED"
	    retval=1
	else
	    echo "Removing obj files and generated binaries........Success"
	    retval=0
	fi
	return "$retval"
}
do_clean_all() {
	echo "Removing obj files and generated binaries...."
	make clean
	if [ $? -ne 0 ]; then
	    echo "Removing obj files and generated binaries....FAILED"
	    retval=1
	else
	    echo "Removing obj files and generated binaries........Success"
	    retval=0
	fi

	echo "Removing configuration scropts and related temporary files...."
        make distclean
	if [ $? -ne 0 ]; then
	    echo "Removing configuration scropts and related temporary files....FAILED"
	    retval=1
	else
	    echo "Removing configuration scropts and related temporary files....SUCCESS"
	    retval=0
	fi


	echo "Removing the remaining temporary files and generated Makefile.in..."
	rm -rf configure config m4/ autom4te.cache/ bin/ aclocal.m4 Makefile.in src/Makefile.in
	if [ $? -ne 0 ]; then
	    echo "Removing the remaining temporary files and generated Makefile.in...FAILED"
	    retval=1
	else
	    echo "Removing the remaining temporary files and generated Makefile.in...Success"
	    retval=0
	fi

	return "$retval"
}
# MAIN ENTRY POINT
# Script execution begins here..
 
if [ $# -eq 0 ]; then
	is_libxml2_present

	echo "Checking whether configure script is present..."
	if [ ! -f ./configure ]; then
		do_autoreconf
		retval=$?
		if [ "$retval" -ne 0 ]; then
		    exit 1
		fi
	else
		echo "Configure script is already present. Hence moving to next step..."
	fi

	echo "Checking whether Makefile is present..."
	if [ ! -f ./Makefile ]; then
		do_configure
		retval=$?
		if [ "$retval" -ne 0 ]; then
	    	    exit 1
		fi
	else
		echo "Makefile is already present. Hence moving to next step..."
	fi

	do_compile
	retval=$?
	if [ "$retval" -ne 0 ]; then
	    exit 1
	fi
else
	option=$1
	if [ "$option" == "--clean" ]; then
	    do_clean
	    retval=$?
	    if [ "$retval" -ne 0 ]; then
	        exit 1
	    fi
	elif [ $option == "--cleanall" ]; then
	    do_clean_all
	    retval=$?
	    if [ "$retval" -ne 0 ]; then
	        exit 1
	    fi
	elif [ $option = "--help" ]; then
            echo "RDK SI Cache Converter Build Script Usage"
            echo "*****************************************"
	    echo "    ./build.sh            ==> Configure, compile and generate SI Cache Converter binary"
            echo "                              (Configuration will be done only if Makefiles are not generated previously)"
	    echo "    ./build.sh --clean    ==> Clean all obj files and binaries"
	    echo "    ./build.sh --cleanall ==> Clean all obj files, binaries, Makefiles and autogenerated configuration files"
	    echo "    ./build.sh --help     ==> Prints this manual"
	    exit 1
	else
	    echo "Invalid option '$option'.  Run './build.sh --help' for more info." 
	fi
fi
